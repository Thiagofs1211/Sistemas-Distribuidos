/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package operacaografo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OperacaoGrafo {

  public interface Iface {

    public Grafo CriarGrafo() throws org.apache.thrift.TException;

    public String criarVertice(long nome, long cor, String descricao, double peso) throws ExisteVertice, org.apache.thrift.TException;

    public String criarAresta(long id, long v1, long v2, double peso, boolean direcionado, String descricao) throws ExisteAresta, NaoExisteVertice, org.apache.thrift.TException;

    public String removeVertice(long nome) throws NaoExisteVertice, org.apache.thrift.TException;

    public String removeAresta(long id) throws NaoExisteAresta, org.apache.thrift.TException;

    public String modificarVertice(long nome, long cor, String descricao, double peso) throws NaoExisteVertice, org.apache.thrift.TException;

    public String modificaAresta(long id, double peso, boolean direcionado, String descricao) throws NaoExisteAresta, org.apache.thrift.TException;

    public String lerGrafo() throws org.apache.thrift.TException;

    public String lerVertice(long nome) throws NaoExisteVertice, org.apache.thrift.TException;

    public String lerAresta(long id) throws NaoExisteAresta, org.apache.thrift.TException;

    public String listarVerticeDeAresta(long id) throws NaoExisteAresta, org.apache.thrift.TException;

    public String listarArestaDeVertice(long nome) throws NaoExisteVertice, org.apache.thrift.TException;

    public String listarVerticesVizinhos(long nome) throws NaoExisteVertice, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CriarGrafo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void criarVertice(long nome, long cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void criarAresta(long id, long v1, long v2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeVertice(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeAresta(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modificarVertice(long nome, long cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modificaAresta(long id, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lerGrafo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lerVertice(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lerAresta(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listarVerticeDeAresta(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listarArestaDeVertice(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listarVerticesVizinhos(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Grafo CriarGrafo() throws org.apache.thrift.TException
    {
      send_CriarGrafo();
      return recv_CriarGrafo();
    }

    public void send_CriarGrafo() throws org.apache.thrift.TException
    {
      CriarGrafo_args args = new CriarGrafo_args();
      sendBase("CriarGrafo", args);
    }

    public Grafo recv_CriarGrafo() throws org.apache.thrift.TException
    {
      CriarGrafo_result result = new CriarGrafo_result();
      receiveBase(result, "CriarGrafo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CriarGrafo failed: unknown result");
    }

    public String criarVertice(long nome, long cor, String descricao, double peso) throws ExisteVertice, org.apache.thrift.TException
    {
      send_criarVertice(nome, cor, descricao, peso);
      return recv_criarVertice();
    }

    public void send_criarVertice(long nome, long cor, String descricao, double peso) throws org.apache.thrift.TException
    {
      criarVertice_args args = new criarVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setDescricao(descricao);
      args.setPeso(peso);
      sendBase("criarVertice", args);
    }

    public String recv_criarVertice() throws ExisteVertice, org.apache.thrift.TException
    {
      criarVertice_result result = new criarVertice_result();
      receiveBase(result, "criarVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.VE != null) {
        throw result.VE;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "criarVertice failed: unknown result");
    }

    public String criarAresta(long id, long v1, long v2, double peso, boolean direcionado, String descricao) throws ExisteAresta, NaoExisteVertice, org.apache.thrift.TException
    {
      send_criarAresta(id, v1, v2, peso, direcionado, descricao);
      return recv_criarAresta();
    }

    public void send_criarAresta(long id, long v1, long v2, double peso, boolean direcionado, String descricao) throws org.apache.thrift.TException
    {
      criarAresta_args args = new criarAresta_args();
      args.setId(id);
      args.setV1(v1);
      args.setV2(v2);
      args.setPeso(peso);
      args.setDirecionado(direcionado);
      args.setDescricao(descricao);
      sendBase("criarAresta", args);
    }

    public String recv_criarAresta() throws ExisteAresta, NaoExisteVertice, org.apache.thrift.TException
    {
      criarAresta_result result = new criarAresta_result();
      receiveBase(result, "criarAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.AE != null) {
        throw result.AE;
      }
      if (result.VI != null) {
        throw result.VI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "criarAresta failed: unknown result");
    }

    public String removeVertice(long nome) throws NaoExisteVertice, org.apache.thrift.TException
    {
      send_removeVertice(nome);
      return recv_removeVertice();
    }

    public void send_removeVertice(long nome) throws org.apache.thrift.TException
    {
      removeVertice_args args = new removeVertice_args();
      args.setNome(nome);
      sendBase("removeVertice", args);
    }

    public String recv_removeVertice() throws NaoExisteVertice, org.apache.thrift.TException
    {
      removeVertice_result result = new removeVertice_result();
      receiveBase(result, "removeVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.VI != null) {
        throw result.VI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeVertice failed: unknown result");
    }

    public String removeAresta(long id) throws NaoExisteAresta, org.apache.thrift.TException
    {
      send_removeAresta(id);
      return recv_removeAresta();
    }

    public void send_removeAresta(long id) throws org.apache.thrift.TException
    {
      removeAresta_args args = new removeAresta_args();
      args.setId(id);
      sendBase("removeAresta", args);
    }

    public String recv_removeAresta() throws NaoExisteAresta, org.apache.thrift.TException
    {
      removeAresta_result result = new removeAresta_result();
      receiveBase(result, "removeAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.AI != null) {
        throw result.AI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeAresta failed: unknown result");
    }

    public String modificarVertice(long nome, long cor, String descricao, double peso) throws NaoExisteVertice, org.apache.thrift.TException
    {
      send_modificarVertice(nome, cor, descricao, peso);
      return recv_modificarVertice();
    }

    public void send_modificarVertice(long nome, long cor, String descricao, double peso) throws org.apache.thrift.TException
    {
      modificarVertice_args args = new modificarVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setDescricao(descricao);
      args.setPeso(peso);
      sendBase("modificarVertice", args);
    }

    public String recv_modificarVertice() throws NaoExisteVertice, org.apache.thrift.TException
    {
      modificarVertice_result result = new modificarVertice_result();
      receiveBase(result, "modificarVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.VI != null) {
        throw result.VI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modificarVertice failed: unknown result");
    }

    public String modificaAresta(long id, double peso, boolean direcionado, String descricao) throws NaoExisteAresta, org.apache.thrift.TException
    {
      send_modificaAresta(id, peso, direcionado, descricao);
      return recv_modificaAresta();
    }

    public void send_modificaAresta(long id, double peso, boolean direcionado, String descricao) throws org.apache.thrift.TException
    {
      modificaAresta_args args = new modificaAresta_args();
      args.setId(id);
      args.setPeso(peso);
      args.setDirecionado(direcionado);
      args.setDescricao(descricao);
      sendBase("modificaAresta", args);
    }

    public String recv_modificaAresta() throws NaoExisteAresta, org.apache.thrift.TException
    {
      modificaAresta_result result = new modificaAresta_result();
      receiveBase(result, "modificaAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.AI != null) {
        throw result.AI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modificaAresta failed: unknown result");
    }

    public String lerGrafo() throws org.apache.thrift.TException
    {
      send_lerGrafo();
      return recv_lerGrafo();
    }

    public void send_lerGrafo() throws org.apache.thrift.TException
    {
      lerGrafo_args args = new lerGrafo_args();
      sendBase("lerGrafo", args);
    }

    public String recv_lerGrafo() throws org.apache.thrift.TException
    {
      lerGrafo_result result = new lerGrafo_result();
      receiveBase(result, "lerGrafo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lerGrafo failed: unknown result");
    }

    public String lerVertice(long nome) throws NaoExisteVertice, org.apache.thrift.TException
    {
      send_lerVertice(nome);
      return recv_lerVertice();
    }

    public void send_lerVertice(long nome) throws org.apache.thrift.TException
    {
      lerVertice_args args = new lerVertice_args();
      args.setNome(nome);
      sendBase("lerVertice", args);
    }

    public String recv_lerVertice() throws NaoExisteVertice, org.apache.thrift.TException
    {
      lerVertice_result result = new lerVertice_result();
      receiveBase(result, "lerVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.VI != null) {
        throw result.VI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lerVertice failed: unknown result");
    }

    public String lerAresta(long id) throws NaoExisteAresta, org.apache.thrift.TException
    {
      send_lerAresta(id);
      return recv_lerAresta();
    }

    public void send_lerAresta(long id) throws org.apache.thrift.TException
    {
      lerAresta_args args = new lerAresta_args();
      args.setId(id);
      sendBase("lerAresta", args);
    }

    public String recv_lerAresta() throws NaoExisteAresta, org.apache.thrift.TException
    {
      lerAresta_result result = new lerAresta_result();
      receiveBase(result, "lerAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.AI != null) {
        throw result.AI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lerAresta failed: unknown result");
    }

    public String listarVerticeDeAresta(long id) throws NaoExisteAresta, org.apache.thrift.TException
    {
      send_listarVerticeDeAresta(id);
      return recv_listarVerticeDeAresta();
    }

    public void send_listarVerticeDeAresta(long id) throws org.apache.thrift.TException
    {
      listarVerticeDeAresta_args args = new listarVerticeDeAresta_args();
      args.setId(id);
      sendBase("listarVerticeDeAresta", args);
    }

    public String recv_listarVerticeDeAresta() throws NaoExisteAresta, org.apache.thrift.TException
    {
      listarVerticeDeAresta_result result = new listarVerticeDeAresta_result();
      receiveBase(result, "listarVerticeDeAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.AI != null) {
        throw result.AI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listarVerticeDeAresta failed: unknown result");
    }

    public String listarArestaDeVertice(long nome) throws NaoExisteVertice, org.apache.thrift.TException
    {
      send_listarArestaDeVertice(nome);
      return recv_listarArestaDeVertice();
    }

    public void send_listarArestaDeVertice(long nome) throws org.apache.thrift.TException
    {
      listarArestaDeVertice_args args = new listarArestaDeVertice_args();
      args.setNome(nome);
      sendBase("listarArestaDeVertice", args);
    }

    public String recv_listarArestaDeVertice() throws NaoExisteVertice, org.apache.thrift.TException
    {
      listarArestaDeVertice_result result = new listarArestaDeVertice_result();
      receiveBase(result, "listarArestaDeVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.VI != null) {
        throw result.VI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listarArestaDeVertice failed: unknown result");
    }

    public String listarVerticesVizinhos(long nome) throws NaoExisteVertice, org.apache.thrift.TException
    {
      send_listarVerticesVizinhos(nome);
      return recv_listarVerticesVizinhos();
    }

    public void send_listarVerticesVizinhos(long nome) throws org.apache.thrift.TException
    {
      listarVerticesVizinhos_args args = new listarVerticesVizinhos_args();
      args.setNome(nome);
      sendBase("listarVerticesVizinhos", args);
    }

    public String recv_listarVerticesVizinhos() throws NaoExisteVertice, org.apache.thrift.TException
    {
      listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
      receiveBase(result, "listarVerticesVizinhos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.VI != null) {
        throw result.VI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listarVerticesVizinhos failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CriarGrafo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CriarGrafo_call method_call = new CriarGrafo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CriarGrafo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public CriarGrafo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CriarGrafo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CriarGrafo_args args = new CriarGrafo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Grafo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CriarGrafo();
      }
    }

    public void criarVertice(long nome, long cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      criarVertice_call method_call = new criarVertice_call(nome, cor, descricao, peso, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class criarVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nome;
      private long cor;
      private String descricao;
      private double peso;
      public criarVertice_call(long nome, long cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.descricao = descricao;
        this.peso = peso;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("criarVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        criarVertice_args args = new criarVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setDescricao(descricao);
        args.setPeso(peso);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_criarVertice();
      }
    }

    public void criarAresta(long id, long v1, long v2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      criarAresta_call method_call = new criarAresta_call(id, v1, v2, peso, direcionado, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class criarAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private long v1;
      private long v2;
      private double peso;
      private boolean direcionado;
      private String descricao;
      public criarAresta_call(long id, long v1, long v2, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.v1 = v1;
        this.v2 = v2;
        this.peso = peso;
        this.direcionado = direcionado;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("criarAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        criarAresta_args args = new criarAresta_args();
        args.setId(id);
        args.setV1(v1);
        args.setV2(v2);
        args.setPeso(peso);
        args.setDirecionado(direcionado);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ExisteAresta, NaoExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_criarAresta();
      }
    }

    public void removeVertice(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeVertice_call method_call = new removeVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nome;
      public removeVertice_call(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeVertice_args args = new removeVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeVertice();
      }
    }

    public void removeAresta(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAresta_call method_call = new removeAresta_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public removeAresta_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAresta_args args = new removeAresta_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteAresta, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeAresta();
      }
    }

    public void modificarVertice(long nome, long cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modificarVertice_call method_call = new modificarVertice_call(nome, cor, descricao, peso, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modificarVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nome;
      private long cor;
      private String descricao;
      private double peso;
      public modificarVertice_call(long nome, long cor, String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.descricao = descricao;
        this.peso = peso;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modificarVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modificarVertice_args args = new modificarVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setDescricao(descricao);
        args.setPeso(peso);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modificarVertice();
      }
    }

    public void modificaAresta(long id, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modificaAresta_call method_call = new modificaAresta_call(id, peso, direcionado, descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modificaAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private double peso;
      private boolean direcionado;
      private String descricao;
      public modificaAresta_call(long id, double peso, boolean direcionado, String descricao, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.peso = peso;
        this.direcionado = direcionado;
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modificaAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modificaAresta_args args = new modificaAresta_args();
        args.setId(id);
        args.setPeso(peso);
        args.setDirecionado(direcionado);
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteAresta, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modificaAresta();
      }
    }

    public void lerGrafo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lerGrafo_call method_call = new lerGrafo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lerGrafo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public lerGrafo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lerGrafo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lerGrafo_args args = new lerGrafo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lerGrafo();
      }
    }

    public void lerVertice(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lerVertice_call method_call = new lerVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lerVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nome;
      public lerVertice_call(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lerVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lerVertice_args args = new lerVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lerVertice();
      }
    }

    public void lerAresta(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lerAresta_call method_call = new lerAresta_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lerAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public lerAresta_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lerAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lerAresta_args args = new lerAresta_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteAresta, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lerAresta();
      }
    }

    public void listarVerticeDeAresta(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarVerticeDeAresta_call method_call = new listarVerticeDeAresta_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarVerticeDeAresta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public listarVerticeDeAresta_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarVerticeDeAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarVerticeDeAresta_args args = new listarVerticeDeAresta_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteAresta, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listarVerticeDeAresta();
      }
    }

    public void listarArestaDeVertice(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarArestaDeVertice_call method_call = new listarArestaDeVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarArestaDeVertice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nome;
      public listarArestaDeVertice_call(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarArestaDeVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarArestaDeVertice_args args = new listarArestaDeVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listarArestaDeVertice();
      }
    }

    public void listarVerticesVizinhos(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarVerticesVizinhos_call method_call = new listarVerticesVizinhos_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarVerticesVizinhos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long nome;
      public listarVerticesVizinhos_call(long nome, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarVerticesVizinhos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarVerticesVizinhos_args args = new listarVerticesVizinhos_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws NaoExisteVertice, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listarVerticesVizinhos();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CriarGrafo", new CriarGrafo());
      processMap.put("criarVertice", new criarVertice());
      processMap.put("criarAresta", new criarAresta());
      processMap.put("removeVertice", new removeVertice());
      processMap.put("removeAresta", new removeAresta());
      processMap.put("modificarVertice", new modificarVertice());
      processMap.put("modificaAresta", new modificaAresta());
      processMap.put("lerGrafo", new lerGrafo());
      processMap.put("lerVertice", new lerVertice());
      processMap.put("lerAresta", new lerAresta());
      processMap.put("listarVerticeDeAresta", new listarVerticeDeAresta());
      processMap.put("listarArestaDeVertice", new listarArestaDeVertice());
      processMap.put("listarVerticesVizinhos", new listarVerticesVizinhos());
      return processMap;
    }

    public static class CriarGrafo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CriarGrafo_args> {
      public CriarGrafo() {
        super("CriarGrafo");
      }

      public CriarGrafo_args getEmptyArgsInstance() {
        return new CriarGrafo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CriarGrafo_result getResult(I iface, CriarGrafo_args args) throws org.apache.thrift.TException {
        CriarGrafo_result result = new CriarGrafo_result();
        result.success = iface.CriarGrafo();
        return result;
      }
    }

    public static class criarVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, criarVertice_args> {
      public criarVertice() {
        super("criarVertice");
      }

      public criarVertice_args getEmptyArgsInstance() {
        return new criarVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public criarVertice_result getResult(I iface, criarVertice_args args) throws org.apache.thrift.TException {
        criarVertice_result result = new criarVertice_result();
        try {
          result.success = iface.criarVertice(args.nome, args.cor, args.descricao, args.peso);
        } catch (ExisteVertice VE) {
          result.VE = VE;
        }
        return result;
      }
    }

    public static class criarAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, criarAresta_args> {
      public criarAresta() {
        super("criarAresta");
      }

      public criarAresta_args getEmptyArgsInstance() {
        return new criarAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public criarAresta_result getResult(I iface, criarAresta_args args) throws org.apache.thrift.TException {
        criarAresta_result result = new criarAresta_result();
        try {
          result.success = iface.criarAresta(args.id, args.v1, args.v2, args.peso, args.direcionado, args.descricao);
        } catch (ExisteAresta AE) {
          result.AE = AE;
        } catch (NaoExisteVertice VI) {
          result.VI = VI;
        }
        return result;
      }
    }

    public static class removeVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeVertice_args> {
      public removeVertice() {
        super("removeVertice");
      }

      public removeVertice_args getEmptyArgsInstance() {
        return new removeVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeVertice_result getResult(I iface, removeVertice_args args) throws org.apache.thrift.TException {
        removeVertice_result result = new removeVertice_result();
        try {
          result.success = iface.removeVertice(args.nome);
        } catch (NaoExisteVertice VI) {
          result.VI = VI;
        }
        return result;
      }
    }

    public static class removeAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAresta_args> {
      public removeAresta() {
        super("removeAresta");
      }

      public removeAresta_args getEmptyArgsInstance() {
        return new removeAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeAresta_result getResult(I iface, removeAresta_args args) throws org.apache.thrift.TException {
        removeAresta_result result = new removeAresta_result();
        try {
          result.success = iface.removeAresta(args.id);
        } catch (NaoExisteAresta AI) {
          result.AI = AI;
        }
        return result;
      }
    }

    public static class modificarVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modificarVertice_args> {
      public modificarVertice() {
        super("modificarVertice");
      }

      public modificarVertice_args getEmptyArgsInstance() {
        return new modificarVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modificarVertice_result getResult(I iface, modificarVertice_args args) throws org.apache.thrift.TException {
        modificarVertice_result result = new modificarVertice_result();
        try {
          result.success = iface.modificarVertice(args.nome, args.cor, args.descricao, args.peso);
        } catch (NaoExisteVertice VI) {
          result.VI = VI;
        }
        return result;
      }
    }

    public static class modificaAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modificaAresta_args> {
      public modificaAresta() {
        super("modificaAresta");
      }

      public modificaAresta_args getEmptyArgsInstance() {
        return new modificaAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modificaAresta_result getResult(I iface, modificaAresta_args args) throws org.apache.thrift.TException {
        modificaAresta_result result = new modificaAresta_result();
        try {
          result.success = iface.modificaAresta(args.id, args.peso, args.direcionado, args.descricao);
        } catch (NaoExisteAresta AI) {
          result.AI = AI;
        }
        return result;
      }
    }

    public static class lerGrafo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lerGrafo_args> {
      public lerGrafo() {
        super("lerGrafo");
      }

      public lerGrafo_args getEmptyArgsInstance() {
        return new lerGrafo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lerGrafo_result getResult(I iface, lerGrafo_args args) throws org.apache.thrift.TException {
        lerGrafo_result result = new lerGrafo_result();
        result.success = iface.lerGrafo();
        return result;
      }
    }

    public static class lerVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lerVertice_args> {
      public lerVertice() {
        super("lerVertice");
      }

      public lerVertice_args getEmptyArgsInstance() {
        return new lerVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lerVertice_result getResult(I iface, lerVertice_args args) throws org.apache.thrift.TException {
        lerVertice_result result = new lerVertice_result();
        try {
          result.success = iface.lerVertice(args.nome);
        } catch (NaoExisteVertice VI) {
          result.VI = VI;
        }
        return result;
      }
    }

    public static class lerAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lerAresta_args> {
      public lerAresta() {
        super("lerAresta");
      }

      public lerAresta_args getEmptyArgsInstance() {
        return new lerAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lerAresta_result getResult(I iface, lerAresta_args args) throws org.apache.thrift.TException {
        lerAresta_result result = new lerAresta_result();
        try {
          result.success = iface.lerAresta(args.id);
        } catch (NaoExisteAresta AI) {
          result.AI = AI;
        }
        return result;
      }
    }

    public static class listarVerticeDeAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarVerticeDeAresta_args> {
      public listarVerticeDeAresta() {
        super("listarVerticeDeAresta");
      }

      public listarVerticeDeAresta_args getEmptyArgsInstance() {
        return new listarVerticeDeAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarVerticeDeAresta_result getResult(I iface, listarVerticeDeAresta_args args) throws org.apache.thrift.TException {
        listarVerticeDeAresta_result result = new listarVerticeDeAresta_result();
        try {
          result.success = iface.listarVerticeDeAresta(args.id);
        } catch (NaoExisteAresta AI) {
          result.AI = AI;
        }
        return result;
      }
    }

    public static class listarArestaDeVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarArestaDeVertice_args> {
      public listarArestaDeVertice() {
        super("listarArestaDeVertice");
      }

      public listarArestaDeVertice_args getEmptyArgsInstance() {
        return new listarArestaDeVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarArestaDeVertice_result getResult(I iface, listarArestaDeVertice_args args) throws org.apache.thrift.TException {
        listarArestaDeVertice_result result = new listarArestaDeVertice_result();
        try {
          result.success = iface.listarArestaDeVertice(args.nome);
        } catch (NaoExisteVertice VI) {
          result.VI = VI;
        }
        return result;
      }
    }

    public static class listarVerticesVizinhos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarVerticesVizinhos_args> {
      public listarVerticesVizinhos() {
        super("listarVerticesVizinhos");
      }

      public listarVerticesVizinhos_args getEmptyArgsInstance() {
        return new listarVerticesVizinhos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarVerticesVizinhos_result getResult(I iface, listarVerticesVizinhos_args args) throws org.apache.thrift.TException {
        listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
        try {
          result.success = iface.listarVerticesVizinhos(args.nome);
        } catch (NaoExisteVertice VI) {
          result.VI = VI;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CriarGrafo", new CriarGrafo());
      processMap.put("criarVertice", new criarVertice());
      processMap.put("criarAresta", new criarAresta());
      processMap.put("removeVertice", new removeVertice());
      processMap.put("removeAresta", new removeAresta());
      processMap.put("modificarVertice", new modificarVertice());
      processMap.put("modificaAresta", new modificaAresta());
      processMap.put("lerGrafo", new lerGrafo());
      processMap.put("lerVertice", new lerVertice());
      processMap.put("lerAresta", new lerAresta());
      processMap.put("listarVerticeDeAresta", new listarVerticeDeAresta());
      processMap.put("listarArestaDeVertice", new listarArestaDeVertice());
      processMap.put("listarVerticesVizinhos", new listarVerticesVizinhos());
      return processMap;
    }

    public static class CriarGrafo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CriarGrafo_args, Grafo> {
      public CriarGrafo() {
        super("CriarGrafo");
      }

      public CriarGrafo_args getEmptyArgsInstance() {
        return new CriarGrafo_args();
      }

      public AsyncMethodCallback<Grafo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Grafo>() { 
          public void onComplete(Grafo o) {
            CriarGrafo_result result = new CriarGrafo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CriarGrafo_result result = new CriarGrafo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CriarGrafo_args args, org.apache.thrift.async.AsyncMethodCallback<Grafo> resultHandler) throws TException {
        iface.CriarGrafo(resultHandler);
      }
    }

    public static class criarVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, criarVertice_args, String> {
      public criarVertice() {
        super("criarVertice");
      }

      public criarVertice_args getEmptyArgsInstance() {
        return new criarVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            criarVertice_result result = new criarVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            criarVertice_result result = new criarVertice_result();
            if (e instanceof ExisteVertice) {
                        result.VE = (ExisteVertice) e;
                        result.setVEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, criarVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.criarVertice(args.nome, args.cor, args.descricao, args.peso,resultHandler);
      }
    }

    public static class criarAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, criarAresta_args, String> {
      public criarAresta() {
        super("criarAresta");
      }

      public criarAresta_args getEmptyArgsInstance() {
        return new criarAresta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            criarAresta_result result = new criarAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            criarAresta_result result = new criarAresta_result();
            if (e instanceof ExisteAresta) {
                        result.AE = (ExisteAresta) e;
                        result.setAEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof NaoExisteVertice) {
                        result.VI = (NaoExisteVertice) e;
                        result.setVIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, criarAresta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.criarAresta(args.id, args.v1, args.v2, args.peso, args.direcionado, args.descricao,resultHandler);
      }
    }

    public static class removeVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeVertice_args, String> {
      public removeVertice() {
        super("removeVertice");
      }

      public removeVertice_args getEmptyArgsInstance() {
        return new removeVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            removeVertice_result result = new removeVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeVertice_result result = new removeVertice_result();
            if (e instanceof NaoExisteVertice) {
                        result.VI = (NaoExisteVertice) e;
                        result.setVIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.removeVertice(args.nome,resultHandler);
      }
    }

    public static class removeAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAresta_args, String> {
      public removeAresta() {
        super("removeAresta");
      }

      public removeAresta_args getEmptyArgsInstance() {
        return new removeAresta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            removeAresta_result result = new removeAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeAresta_result result = new removeAresta_result();
            if (e instanceof NaoExisteAresta) {
                        result.AI = (NaoExisteAresta) e;
                        result.setAIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAresta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.removeAresta(args.id,resultHandler);
      }
    }

    public static class modificarVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modificarVertice_args, String> {
      public modificarVertice() {
        super("modificarVertice");
      }

      public modificarVertice_args getEmptyArgsInstance() {
        return new modificarVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            modificarVertice_result result = new modificarVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modificarVertice_result result = new modificarVertice_result();
            if (e instanceof NaoExisteVertice) {
                        result.VI = (NaoExisteVertice) e;
                        result.setVIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modificarVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.modificarVertice(args.nome, args.cor, args.descricao, args.peso,resultHandler);
      }
    }

    public static class modificaAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modificaAresta_args, String> {
      public modificaAresta() {
        super("modificaAresta");
      }

      public modificaAresta_args getEmptyArgsInstance() {
        return new modificaAresta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            modificaAresta_result result = new modificaAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modificaAresta_result result = new modificaAresta_result();
            if (e instanceof NaoExisteAresta) {
                        result.AI = (NaoExisteAresta) e;
                        result.setAIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modificaAresta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.modificaAresta(args.id, args.peso, args.direcionado, args.descricao,resultHandler);
      }
    }

    public static class lerGrafo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lerGrafo_args, String> {
      public lerGrafo() {
        super("lerGrafo");
      }

      public lerGrafo_args getEmptyArgsInstance() {
        return new lerGrafo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            lerGrafo_result result = new lerGrafo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lerGrafo_result result = new lerGrafo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lerGrafo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.lerGrafo(resultHandler);
      }
    }

    public static class lerVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lerVertice_args, String> {
      public lerVertice() {
        super("lerVertice");
      }

      public lerVertice_args getEmptyArgsInstance() {
        return new lerVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            lerVertice_result result = new lerVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lerVertice_result result = new lerVertice_result();
            if (e instanceof NaoExisteVertice) {
                        result.VI = (NaoExisteVertice) e;
                        result.setVIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lerVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.lerVertice(args.nome,resultHandler);
      }
    }

    public static class lerAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lerAresta_args, String> {
      public lerAresta() {
        super("lerAresta");
      }

      public lerAresta_args getEmptyArgsInstance() {
        return new lerAresta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            lerAresta_result result = new lerAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lerAresta_result result = new lerAresta_result();
            if (e instanceof NaoExisteAresta) {
                        result.AI = (NaoExisteAresta) e;
                        result.setAIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lerAresta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.lerAresta(args.id,resultHandler);
      }
    }

    public static class listarVerticeDeAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarVerticeDeAresta_args, String> {
      public listarVerticeDeAresta() {
        super("listarVerticeDeAresta");
      }

      public listarVerticeDeAresta_args getEmptyArgsInstance() {
        return new listarVerticeDeAresta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listarVerticeDeAresta_result result = new listarVerticeDeAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listarVerticeDeAresta_result result = new listarVerticeDeAresta_result();
            if (e instanceof NaoExisteAresta) {
                        result.AI = (NaoExisteAresta) e;
                        result.setAIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarVerticeDeAresta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listarVerticeDeAresta(args.id,resultHandler);
      }
    }

    public static class listarArestaDeVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarArestaDeVertice_args, String> {
      public listarArestaDeVertice() {
        super("listarArestaDeVertice");
      }

      public listarArestaDeVertice_args getEmptyArgsInstance() {
        return new listarArestaDeVertice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listarArestaDeVertice_result result = new listarArestaDeVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listarArestaDeVertice_result result = new listarArestaDeVertice_result();
            if (e instanceof NaoExisteVertice) {
                        result.VI = (NaoExisteVertice) e;
                        result.setVIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarArestaDeVertice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listarArestaDeVertice(args.nome,resultHandler);
      }
    }

    public static class listarVerticesVizinhos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarVerticesVizinhos_args, String> {
      public listarVerticesVizinhos() {
        super("listarVerticesVizinhos");
      }

      public listarVerticesVizinhos_args getEmptyArgsInstance() {
        return new listarVerticesVizinhos_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
            if (e instanceof NaoExisteVertice) {
                        result.VI = (NaoExisteVertice) e;
                        result.setVIIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarVerticesVizinhos_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listarVerticesVizinhos(args.nome,resultHandler);
      }
    }

  }

  public static class CriarGrafo_args implements org.apache.thrift.TBase<CriarGrafo_args, CriarGrafo_args._Fields>, java.io.Serializable, Cloneable, Comparable<CriarGrafo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CriarGrafo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CriarGrafo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CriarGrafo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CriarGrafo_args.class, metaDataMap);
    }

    public CriarGrafo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CriarGrafo_args(CriarGrafo_args other) {
    }

    public CriarGrafo_args deepCopy() {
      return new CriarGrafo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CriarGrafo_args)
        return this.equals((CriarGrafo_args)that);
      return false;
    }

    public boolean equals(CriarGrafo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(CriarGrafo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CriarGrafo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CriarGrafo_argsStandardSchemeFactory implements SchemeFactory {
      public CriarGrafo_argsStandardScheme getScheme() {
        return new CriarGrafo_argsStandardScheme();
      }
    }

    private static class CriarGrafo_argsStandardScheme extends StandardScheme<CriarGrafo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CriarGrafo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CriarGrafo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CriarGrafo_argsTupleSchemeFactory implements SchemeFactory {
      public CriarGrafo_argsTupleScheme getScheme() {
        return new CriarGrafo_argsTupleScheme();
      }
    }

    private static class CriarGrafo_argsTupleScheme extends TupleScheme<CriarGrafo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CriarGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CriarGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class CriarGrafo_result implements org.apache.thrift.TBase<CriarGrafo_result, CriarGrafo_result._Fields>, java.io.Serializable, Cloneable, Comparable<CriarGrafo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CriarGrafo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CriarGrafo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CriarGrafo_resultTupleSchemeFactory());
    }

    public Grafo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Grafo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CriarGrafo_result.class, metaDataMap);
    }

    public CriarGrafo_result() {
    }

    public CriarGrafo_result(
      Grafo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CriarGrafo_result(CriarGrafo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Grafo(other.success);
      }
    }

    public CriarGrafo_result deepCopy() {
      return new CriarGrafo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Grafo getSuccess() {
      return this.success;
    }

    public CriarGrafo_result setSuccess(Grafo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Grafo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CriarGrafo_result)
        return this.equals((CriarGrafo_result)that);
      return false;
    }

    public boolean equals(CriarGrafo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(CriarGrafo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CriarGrafo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CriarGrafo_resultStandardSchemeFactory implements SchemeFactory {
      public CriarGrafo_resultStandardScheme getScheme() {
        return new CriarGrafo_resultStandardScheme();
      }
    }

    private static class CriarGrafo_resultStandardScheme extends StandardScheme<CriarGrafo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CriarGrafo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Grafo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CriarGrafo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CriarGrafo_resultTupleSchemeFactory implements SchemeFactory {
      public CriarGrafo_resultTupleScheme getScheme() {
        return new CriarGrafo_resultTupleScheme();
      }
    }

    private static class CriarGrafo_resultTupleScheme extends TupleScheme<CriarGrafo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CriarGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CriarGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Grafo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class criarVertice_args implements org.apache.thrift.TBase<criarVertice_args, criarVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<criarVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new criarVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new criarVertice_argsTupleSchemeFactory());
    }

    public long nome; // required
    public long cor; // required
    public String descricao; // required
    public double peso; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      DESCRICAO((short)3, "descricao"),
      PESO((short)4, "peso");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // DESCRICAO
            return DESCRICAO;
          case 4: // PESO
            return PESO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarVertice_args.class, metaDataMap);
    }

    public criarVertice_args() {
    }

    public criarVertice_args(
      long nome,
      long cor,
      String descricao,
      double peso)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.descricao = descricao;
      this.peso = peso;
      setPesoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarVertice_args(criarVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
      this.peso = other.peso;
    }

    public criarVertice_args deepCopy() {
      return new criarVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      this.descricao = null;
      setPesoIsSet(false);
      this.peso = 0.0;
    }

    public long getNome() {
      return this.nome;
    }

    public criarVertice_args setNome(long nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public long getCor() {
      return this.cor;
    }

    public criarVertice_args setCor(long cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public criarVertice_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public double getPeso() {
      return this.peso;
    }

    public criarVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Long)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((Long)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Long.valueOf(getNome());

      case COR:
        return Long.valueOf(getCor());

      case DESCRICAO:
        return getDescricao();

      case PESO:
        return Double.valueOf(getPeso());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case DESCRICAO:
        return isSetDescricao();
      case PESO:
        return isSetPeso();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof criarVertice_args)
        return this.equals((criarVertice_args)that);
      return false;
    }

    public boolean equals(criarVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(criarVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("criarVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarVertice_argsStandardSchemeFactory implements SchemeFactory {
      public criarVertice_argsStandardScheme getScheme() {
        return new criarVertice_argsStandardScheme();
      }
    }

    private static class criarVertice_argsStandardScheme extends StandardScheme<criarVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nome = iprot.readI64();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cor = iprot.readI64();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI64(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI64(struct.cor);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarVertice_argsTupleSchemeFactory implements SchemeFactory {
      public criarVertice_argsTupleScheme getScheme() {
        return new criarVertice_argsTupleScheme();
      }
    }

    private static class criarVertice_argsTupleScheme extends TupleScheme<criarVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetDescricao()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI64(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI64(struct.cor);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI64();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI64();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
      }
    }

  }

  public static class criarVertice_result implements org.apache.thrift.TBase<criarVertice_result, criarVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<criarVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField VE_FIELD_DESC = new org.apache.thrift.protocol.TField("VE", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new criarVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new criarVertice_resultTupleSchemeFactory());
    }

    public String success; // required
    public ExisteVertice VE; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VE((short)1, "VE");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VE
            return VE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VE, new org.apache.thrift.meta_data.FieldMetaData("VE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarVertice_result.class, metaDataMap);
    }

    public criarVertice_result() {
    }

    public criarVertice_result(
      String success,
      ExisteVertice VE)
    {
      this();
      this.success = success;
      this.VE = VE;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarVertice_result(criarVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetVE()) {
        this.VE = new ExisteVertice(other.VE);
      }
    }

    public criarVertice_result deepCopy() {
      return new criarVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.VE = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public criarVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExisteVertice getVE() {
      return this.VE;
    }

    public criarVertice_result setVE(ExisteVertice VE) {
      this.VE = VE;
      return this;
    }

    public void unsetVE() {
      this.VE = null;
    }

    /** Returns true if field VE is set (has been assigned a value) and false otherwise */
    public boolean isSetVE() {
      return this.VE != null;
    }

    public void setVEIsSet(boolean value) {
      if (!value) {
        this.VE = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case VE:
        if (value == null) {
          unsetVE();
        } else {
          setVE((ExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VE:
        return getVE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VE:
        return isSetVE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof criarVertice_result)
        return this.equals((criarVertice_result)that);
      return false;
    }

    public boolean equals(criarVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_VE = true && this.isSetVE();
      boolean that_present_VE = true && that.isSetVE();
      if (this_present_VE || that_present_VE) {
        if (!(this_present_VE && that_present_VE))
          return false;
        if (!this.VE.equals(that.VE))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(criarVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVE()).compareTo(other.isSetVE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VE, other.VE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("criarVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VE:");
      if (this.VE == null) {
        sb.append("null");
      } else {
        sb.append(this.VE);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarVertice_resultStandardSchemeFactory implements SchemeFactory {
      public criarVertice_resultStandardScheme getScheme() {
        return new criarVertice_resultStandardScheme();
      }
    }

    private static class criarVertice_resultStandardScheme extends StandardScheme<criarVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VE = new ExisteVertice();
                struct.VE.read(iprot);
                struct.setVEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.VE != null) {
          oprot.writeFieldBegin(VE_FIELD_DESC);
          struct.VE.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarVertice_resultTupleSchemeFactory implements SchemeFactory {
      public criarVertice_resultTupleScheme getScheme() {
        return new criarVertice_resultTupleScheme();
      }
    }

    private static class criarVertice_resultTupleScheme extends TupleScheme<criarVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetVE()) {
          struct.VE.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.VE = new ExisteVertice();
          struct.VE.read(iprot);
          struct.setVEIsSet(true);
        }
      }
    }

  }

  public static class criarAresta_args implements org.apache.thrift.TBase<criarAresta_args, criarAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<criarAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarAresta_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField DIRECIONADO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcionado", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new criarAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new criarAresta_argsTupleSchemeFactory());
    }

    public long id; // required
    public long v1; // required
    public long v2; // required
    public double peso; // required
    public boolean direcionado; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      V1((short)2, "v1"),
      V2((short)3, "v2"),
      PESO((short)4, "peso"),
      DIRECIONADO((short)5, "direcionado"),
      DESCRICAO((short)6, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // V1
            return V1;
          case 3: // V2
            return V2;
          case 4: // PESO
            return PESO;
          case 5: // DIRECIONADO
            return DIRECIONADO;
          case 6: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __V1_ISSET_ID = 1;
    private static final int __V2_ISSET_ID = 2;
    private static final int __PESO_ISSET_ID = 3;
    private static final int __DIRECIONADO_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECIONADO, new org.apache.thrift.meta_data.FieldMetaData("direcionado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarAresta_args.class, metaDataMap);
    }

    public criarAresta_args() {
    }

    public criarAresta_args(
      long id,
      long v1,
      long v2,
      double peso,
      boolean direcionado,
      String descricao)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.v1 = v1;
      setV1IsSet(true);
      this.v2 = v2;
      setV2IsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarAresta_args(criarAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.v1 = other.v1;
      this.v2 = other.v2;
      this.peso = other.peso;
      this.direcionado = other.direcionado;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public criarAresta_args deepCopy() {
      return new criarAresta_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setV1IsSet(false);
      this.v1 = 0;
      setV2IsSet(false);
      this.v2 = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecionadoIsSet(false);
      this.direcionado = false;
      this.descricao = null;
    }

    public long getId() {
      return this.id;
    }

    public criarAresta_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public long getV1() {
      return this.v1;
    }

    public criarAresta_args setV1(long v1) {
      this.v1 = v1;
      setV1IsSet(true);
      return this;
    }

    public void unsetV1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V1_ISSET_ID);
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return EncodingUtils.testBit(__isset_bitfield, __V1_ISSET_ID);
    }

    public void setV1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V1_ISSET_ID, value);
    }

    public long getV2() {
      return this.v2;
    }

    public criarAresta_args setV2(long v2) {
      this.v2 = v2;
      setV2IsSet(true);
      return this;
    }

    public void unsetV2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V2_ISSET_ID);
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return EncodingUtils.testBit(__isset_bitfield, __V2_ISSET_ID);
    }

    public void setV2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V2_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public criarAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecionado() {
      return this.direcionado;
    }

    public criarAresta_args setDirecionado(boolean direcionado) {
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      return this;
    }

    public void unsetDirecionado() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    /** Returns true if field direcionado is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecionado() {
      return EncodingUtils.testBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    public void setDirecionadoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECIONADO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public criarAresta_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case V1:
        if (value == null) {
          unsetV1();
        } else {
          setV1((Long)value);
        }
        break;

      case V2:
        if (value == null) {
          unsetV2();
        } else {
          setV2((Long)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DIRECIONADO:
        if (value == null) {
          unsetDirecionado();
        } else {
          setDirecionado((Boolean)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case V1:
        return Long.valueOf(getV1());

      case V2:
        return Long.valueOf(getV2());

      case PESO:
        return Double.valueOf(getPeso());

      case DIRECIONADO:
        return Boolean.valueOf(isDirecionado());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case V1:
        return isSetV1();
      case V2:
        return isSetV2();
      case PESO:
        return isSetPeso();
      case DIRECIONADO:
        return isSetDirecionado();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof criarAresta_args)
        return this.equals((criarAresta_args)that);
      return false;
    }

    public boolean equals(criarAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_v1 = true;
      boolean that_present_v1 = true;
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (this.v1 != that.v1)
          return false;
      }

      boolean this_present_v2 = true;
      boolean that_present_v2 = true;
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (this.v2 != that.v2)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcionado = true;
      boolean that_present_direcionado = true;
      if (this_present_direcionado || that_present_direcionado) {
        if (!(this_present_direcionado && that_present_direcionado))
          return false;
        if (this.direcionado != that.direcionado)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(criarAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirecionado()).compareTo(other.isSetDirecionado());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecionado()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcionado, other.direcionado);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("criarAresta_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v1:");
      sb.append(this.v1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      sb.append(this.v2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcionado:");
      sb.append(this.direcionado);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarAresta_argsStandardSchemeFactory implements SchemeFactory {
      public criarAresta_argsStandardScheme getScheme() {
        return new criarAresta_argsStandardScheme();
      }
    }

    private static class criarAresta_argsStandardScheme extends StandardScheme<criarAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.v1 = iprot.readI64();
                struct.setV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.v2 = iprot.readI64();
                struct.setV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DIRECIONADO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcionado = iprot.readBool();
                struct.setDirecionadoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V1_FIELD_DESC);
        oprot.writeI64(struct.v1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V2_FIELD_DESC);
        oprot.writeI64(struct.v2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECIONADO_FIELD_DESC);
        oprot.writeBool(struct.direcionado);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarAresta_argsTupleSchemeFactory implements SchemeFactory {
      public criarAresta_argsTupleScheme getScheme() {
        return new criarAresta_argsTupleScheme();
      }
    }

    private static class criarAresta_argsTupleScheme extends TupleScheme<criarAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetV1()) {
          optionals.set(1);
        }
        if (struct.isSetV2()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        if (struct.isSetDirecionado()) {
          optionals.set(4);
        }
        if (struct.isSetDescricao()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetV1()) {
          oprot.writeI64(struct.v1);
        }
        if (struct.isSetV2()) {
          oprot.writeI64(struct.v2);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecionado()) {
          oprot.writeBool(struct.direcionado);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.v1 = iprot.readI64();
          struct.setV1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.v2 = iprot.readI64();
          struct.setV2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.direcionado = iprot.readBool();
          struct.setDirecionadoIsSet(true);
        }
        if (incoming.get(5)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class criarAresta_result implements org.apache.thrift.TBase<criarAresta_result, criarAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<criarAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("AE", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VI_FIELD_DESC = new org.apache.thrift.protocol.TField("VI", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new criarAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new criarAresta_resultTupleSchemeFactory());
    }

    public String success; // required
    public ExisteAresta AE; // required
    public NaoExisteVertice VI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AE((short)1, "AE"),
      VI((short)2, "VI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AE
            return AE;
          case 2: // VI
            return VI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("AE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.VI, new org.apache.thrift.meta_data.FieldMetaData("VI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarAresta_result.class, metaDataMap);
    }

    public criarAresta_result() {
    }

    public criarAresta_result(
      String success,
      ExisteAresta AE,
      NaoExisteVertice VI)
    {
      this();
      this.success = success;
      this.AE = AE;
      this.VI = VI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarAresta_result(criarAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAE()) {
        this.AE = new ExisteAresta(other.AE);
      }
      if (other.isSetVI()) {
        this.VI = new NaoExisteVertice(other.VI);
      }
    }

    public criarAresta_result deepCopy() {
      return new criarAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.AE = null;
      this.VI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public criarAresta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExisteAresta getAE() {
      return this.AE;
    }

    public criarAresta_result setAE(ExisteAresta AE) {
      this.AE = AE;
      return this;
    }

    public void unsetAE() {
      this.AE = null;
    }

    /** Returns true if field AE is set (has been assigned a value) and false otherwise */
    public boolean isSetAE() {
      return this.AE != null;
    }

    public void setAEIsSet(boolean value) {
      if (!value) {
        this.AE = null;
      }
    }

    public NaoExisteVertice getVI() {
      return this.VI;
    }

    public criarAresta_result setVI(NaoExisteVertice VI) {
      this.VI = VI;
      return this;
    }

    public void unsetVI() {
      this.VI = null;
    }

    /** Returns true if field VI is set (has been assigned a value) and false otherwise */
    public boolean isSetVI() {
      return this.VI != null;
    }

    public void setVIIsSet(boolean value) {
      if (!value) {
        this.VI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAE();
        } else {
          setAE((ExisteAresta)value);
        }
        break;

      case VI:
        if (value == null) {
          unsetVI();
        } else {
          setVI((NaoExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AE:
        return getAE();

      case VI:
        return getVI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAE();
      case VI:
        return isSetVI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof criarAresta_result)
        return this.equals((criarAresta_result)that);
      return false;
    }

    public boolean equals(criarAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_AE = true && this.isSetAE();
      boolean that_present_AE = true && that.isSetAE();
      if (this_present_AE || that_present_AE) {
        if (!(this_present_AE && that_present_AE))
          return false;
        if (!this.AE.equals(that.AE))
          return false;
      }

      boolean this_present_VI = true && this.isSetVI();
      boolean that_present_VI = true && that.isSetVI();
      if (this_present_VI || that_present_VI) {
        if (!(this_present_VI && that_present_VI))
          return false;
        if (!this.VI.equals(that.VI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(criarAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAE()).compareTo(other.isSetAE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AE, other.AE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVI()).compareTo(other.isSetVI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VI, other.VI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("criarAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("AE:");
      if (this.AE == null) {
        sb.append("null");
      } else {
        sb.append(this.AE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VI:");
      if (this.VI == null) {
        sb.append("null");
      } else {
        sb.append(this.VI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarAresta_resultStandardSchemeFactory implements SchemeFactory {
      public criarAresta_resultStandardScheme getScheme() {
        return new criarAresta_resultStandardScheme();
      }
    }

    private static class criarAresta_resultStandardScheme extends StandardScheme<criarAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.AE = new ExisteAresta();
                struct.AE.read(iprot);
                struct.setAEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VI = new NaoExisteVertice();
                struct.VI.read(iprot);
                struct.setVIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.AE != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.AE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.VI != null) {
          oprot.writeFieldBegin(VI_FIELD_DESC);
          struct.VI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarAresta_resultTupleSchemeFactory implements SchemeFactory {
      public criarAresta_resultTupleScheme getScheme() {
        return new criarAresta_resultTupleScheme();
      }
    }

    private static class criarAresta_resultTupleScheme extends TupleScheme<criarAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAE()) {
          optionals.set(1);
        }
        if (struct.isSetVI()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAE()) {
          struct.AE.write(oprot);
        }
        if (struct.isSetVI()) {
          struct.VI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.AE = new ExisteAresta();
          struct.AE.read(iprot);
          struct.setAEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.VI = new NaoExisteVertice();
          struct.VI.read(iprot);
          struct.setVIIsSet(true);
        }
      }
    }

  }

  public static class removeVertice_args implements org.apache.thrift.TBase<removeVertice_args, removeVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeVertice_argsTupleSchemeFactory());
    }

    public long nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeVertice_args.class, metaDataMap);
    }

    public removeVertice_args() {
    }

    public removeVertice_args(
      long nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeVertice_args(removeVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public removeVertice_args deepCopy() {
      return new removeVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public long getNome() {
      return this.nome;
    }

    public removeVertice_args setNome(long nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Long.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeVertice_args)
        return this.equals((removeVertice_args)that);
      return false;
    }

    public boolean equals(removeVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeVertice_argsStandardSchemeFactory implements SchemeFactory {
      public removeVertice_argsStandardScheme getScheme() {
        return new removeVertice_argsStandardScheme();
      }
    }

    private static class removeVertice_argsStandardScheme extends StandardScheme<removeVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nome = iprot.readI64();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI64(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeVertice_argsTupleSchemeFactory implements SchemeFactory {
      public removeVertice_argsTupleScheme getScheme() {
        return new removeVertice_argsTupleScheme();
      }
    }

    private static class removeVertice_argsTupleScheme extends TupleScheme<removeVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI64(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI64();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class removeVertice_result implements org.apache.thrift.TBase<removeVertice_result, removeVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField VI_FIELD_DESC = new org.apache.thrift.protocol.TField("VI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeVertice_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteVertice VI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VI((short)1, "VI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VI
            return VI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VI, new org.apache.thrift.meta_data.FieldMetaData("VI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeVertice_result.class, metaDataMap);
    }

    public removeVertice_result() {
    }

    public removeVertice_result(
      String success,
      NaoExisteVertice VI)
    {
      this();
      this.success = success;
      this.VI = VI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeVertice_result(removeVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetVI()) {
        this.VI = new NaoExisteVertice(other.VI);
      }
    }

    public removeVertice_result deepCopy() {
      return new removeVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.VI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public removeVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteVertice getVI() {
      return this.VI;
    }

    public removeVertice_result setVI(NaoExisteVertice VI) {
      this.VI = VI;
      return this;
    }

    public void unsetVI() {
      this.VI = null;
    }

    /** Returns true if field VI is set (has been assigned a value) and false otherwise */
    public boolean isSetVI() {
      return this.VI != null;
    }

    public void setVIIsSet(boolean value) {
      if (!value) {
        this.VI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case VI:
        if (value == null) {
          unsetVI();
        } else {
          setVI((NaoExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VI:
        return getVI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VI:
        return isSetVI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeVertice_result)
        return this.equals((removeVertice_result)that);
      return false;
    }

    public boolean equals(removeVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_VI = true && this.isSetVI();
      boolean that_present_VI = true && that.isSetVI();
      if (this_present_VI || that_present_VI) {
        if (!(this_present_VI && that_present_VI))
          return false;
        if (!this.VI.equals(that.VI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVI()).compareTo(other.isSetVI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VI, other.VI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VI:");
      if (this.VI == null) {
        sb.append("null");
      } else {
        sb.append(this.VI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeVertice_resultStandardSchemeFactory implements SchemeFactory {
      public removeVertice_resultStandardScheme getScheme() {
        return new removeVertice_resultStandardScheme();
      }
    }

    private static class removeVertice_resultStandardScheme extends StandardScheme<removeVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VI = new NaoExisteVertice();
                struct.VI.read(iprot);
                struct.setVIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.VI != null) {
          oprot.writeFieldBegin(VI_FIELD_DESC);
          struct.VI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeVertice_resultTupleSchemeFactory implements SchemeFactory {
      public removeVertice_resultTupleScheme getScheme() {
        return new removeVertice_resultTupleScheme();
      }
    }

    private static class removeVertice_resultTupleScheme extends TupleScheme<removeVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetVI()) {
          struct.VI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.VI = new NaoExisteVertice();
          struct.VI.read(iprot);
          struct.setVIIsSet(true);
        }
      }
    }

  }

  public static class removeAresta_args implements org.apache.thrift.TBase<removeAresta_args, removeAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAresta_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAresta_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAresta_args.class, metaDataMap);
    }

    public removeAresta_args() {
    }

    public removeAresta_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAresta_args(removeAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public removeAresta_args deepCopy() {
      return new removeAresta_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public removeAresta_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAresta_args)
        return this.equals((removeAresta_args)that);
      return false;
    }

    public boolean equals(removeAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAresta_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAresta_argsStandardSchemeFactory implements SchemeFactory {
      public removeAresta_argsStandardScheme getScheme() {
        return new removeAresta_argsStandardScheme();
      }
    }

    private static class removeAresta_argsStandardScheme extends StandardScheme<removeAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAresta_argsTupleSchemeFactory implements SchemeFactory {
      public removeAresta_argsTupleScheme getScheme() {
        return new removeAresta_argsTupleScheme();
      }
    }

    private static class removeAresta_argsTupleScheme extends TupleScheme<removeAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class removeAresta_result implements org.apache.thrift.TBase<removeAresta_result, removeAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AI_FIELD_DESC = new org.apache.thrift.protocol.TField("AI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeAresta_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteAresta AI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AI((short)1, "AI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AI
            return AI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AI, new org.apache.thrift.meta_data.FieldMetaData("AI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAresta_result.class, metaDataMap);
    }

    public removeAresta_result() {
    }

    public removeAresta_result(
      String success,
      NaoExisteAresta AI)
    {
      this();
      this.success = success;
      this.AI = AI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAresta_result(removeAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAI()) {
        this.AI = new NaoExisteAresta(other.AI);
      }
    }

    public removeAresta_result deepCopy() {
      return new removeAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.AI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public removeAresta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteAresta getAI() {
      return this.AI;
    }

    public removeAresta_result setAI(NaoExisteAresta AI) {
      this.AI = AI;
      return this;
    }

    public void unsetAI() {
      this.AI = null;
    }

    /** Returns true if field AI is set (has been assigned a value) and false otherwise */
    public boolean isSetAI() {
      return this.AI != null;
    }

    public void setAIIsSet(boolean value) {
      if (!value) {
        this.AI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AI:
        if (value == null) {
          unsetAI();
        } else {
          setAI((NaoExisteAresta)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AI:
        return getAI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AI:
        return isSetAI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAresta_result)
        return this.equals((removeAresta_result)that);
      return false;
    }

    public boolean equals(removeAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_AI = true && this.isSetAI();
      boolean that_present_AI = true && that.isSetAI();
      if (this_present_AI || that_present_AI) {
        if (!(this_present_AI && that_present_AI))
          return false;
        if (!this.AI.equals(that.AI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAI()).compareTo(other.isSetAI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AI, other.AI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("AI:");
      if (this.AI == null) {
        sb.append("null");
      } else {
        sb.append(this.AI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAresta_resultStandardSchemeFactory implements SchemeFactory {
      public removeAresta_resultStandardScheme getScheme() {
        return new removeAresta_resultStandardScheme();
      }
    }

    private static class removeAresta_resultStandardScheme extends StandardScheme<removeAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.AI = new NaoExisteAresta();
                struct.AI.read(iprot);
                struct.setAIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.AI != null) {
          oprot.writeFieldBegin(AI_FIELD_DESC);
          struct.AI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAresta_resultTupleSchemeFactory implements SchemeFactory {
      public removeAresta_resultTupleScheme getScheme() {
        return new removeAresta_resultTupleScheme();
      }
    }

    private static class removeAresta_resultTupleScheme extends TupleScheme<removeAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAI()) {
          struct.AI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.AI = new NaoExisteAresta();
          struct.AI.read(iprot);
          struct.setAIIsSet(true);
        }
      }
    }

  }

  public static class modificarVertice_args implements org.apache.thrift.TBase<modificarVertice_args, modificarVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<modificarVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modificarVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modificarVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modificarVertice_argsTupleSchemeFactory());
    }

    public long nome; // required
    public long cor; // required
    public String descricao; // required
    public double peso; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      DESCRICAO((short)3, "descricao"),
      PESO((short)4, "peso");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // DESCRICAO
            return DESCRICAO;
          case 4: // PESO
            return PESO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modificarVertice_args.class, metaDataMap);
    }

    public modificarVertice_args() {
    }

    public modificarVertice_args(
      long nome,
      long cor,
      String descricao,
      double peso)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.descricao = descricao;
      this.peso = peso;
      setPesoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modificarVertice_args(modificarVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
      this.peso = other.peso;
    }

    public modificarVertice_args deepCopy() {
      return new modificarVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      this.descricao = null;
      setPesoIsSet(false);
      this.peso = 0.0;
    }

    public long getNome() {
      return this.nome;
    }

    public modificarVertice_args setNome(long nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public long getCor() {
      return this.cor;
    }

    public modificarVertice_args setCor(long cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public modificarVertice_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public double getPeso() {
      return this.peso;
    }

    public modificarVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Long)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((Long)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Long.valueOf(getNome());

      case COR:
        return Long.valueOf(getCor());

      case DESCRICAO:
        return getDescricao();

      case PESO:
        return Double.valueOf(getPeso());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case DESCRICAO:
        return isSetDescricao();
      case PESO:
        return isSetPeso();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modificarVertice_args)
        return this.equals((modificarVertice_args)that);
      return false;
    }

    public boolean equals(modificarVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modificarVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modificarVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modificarVertice_argsStandardSchemeFactory implements SchemeFactory {
      public modificarVertice_argsStandardScheme getScheme() {
        return new modificarVertice_argsStandardScheme();
      }
    }

    private static class modificarVertice_argsStandardScheme extends StandardScheme<modificarVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modificarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nome = iprot.readI64();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cor = iprot.readI64();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modificarVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI64(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI64(struct.cor);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modificarVertice_argsTupleSchemeFactory implements SchemeFactory {
      public modificarVertice_argsTupleScheme getScheme() {
        return new modificarVertice_argsTupleScheme();
      }
    }

    private static class modificarVertice_argsTupleScheme extends TupleScheme<modificarVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modificarVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetDescricao()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI64(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI64(struct.cor);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modificarVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI64();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI64();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
      }
    }

  }

  public static class modificarVertice_result implements org.apache.thrift.TBase<modificarVertice_result, modificarVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<modificarVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modificarVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField VI_FIELD_DESC = new org.apache.thrift.protocol.TField("VI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modificarVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modificarVertice_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteVertice VI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VI((short)1, "VI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VI
            return VI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VI, new org.apache.thrift.meta_data.FieldMetaData("VI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modificarVertice_result.class, metaDataMap);
    }

    public modificarVertice_result() {
    }

    public modificarVertice_result(
      String success,
      NaoExisteVertice VI)
    {
      this();
      this.success = success;
      this.VI = VI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modificarVertice_result(modificarVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetVI()) {
        this.VI = new NaoExisteVertice(other.VI);
      }
    }

    public modificarVertice_result deepCopy() {
      return new modificarVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.VI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public modificarVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteVertice getVI() {
      return this.VI;
    }

    public modificarVertice_result setVI(NaoExisteVertice VI) {
      this.VI = VI;
      return this;
    }

    public void unsetVI() {
      this.VI = null;
    }

    /** Returns true if field VI is set (has been assigned a value) and false otherwise */
    public boolean isSetVI() {
      return this.VI != null;
    }

    public void setVIIsSet(boolean value) {
      if (!value) {
        this.VI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case VI:
        if (value == null) {
          unsetVI();
        } else {
          setVI((NaoExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VI:
        return getVI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VI:
        return isSetVI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modificarVertice_result)
        return this.equals((modificarVertice_result)that);
      return false;
    }

    public boolean equals(modificarVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_VI = true && this.isSetVI();
      boolean that_present_VI = true && that.isSetVI();
      if (this_present_VI || that_present_VI) {
        if (!(this_present_VI && that_present_VI))
          return false;
        if (!this.VI.equals(that.VI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modificarVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVI()).compareTo(other.isSetVI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VI, other.VI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modificarVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VI:");
      if (this.VI == null) {
        sb.append("null");
      } else {
        sb.append(this.VI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modificarVertice_resultStandardSchemeFactory implements SchemeFactory {
      public modificarVertice_resultStandardScheme getScheme() {
        return new modificarVertice_resultStandardScheme();
      }
    }

    private static class modificarVertice_resultStandardScheme extends StandardScheme<modificarVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modificarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VI = new NaoExisteVertice();
                struct.VI.read(iprot);
                struct.setVIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modificarVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.VI != null) {
          oprot.writeFieldBegin(VI_FIELD_DESC);
          struct.VI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modificarVertice_resultTupleSchemeFactory implements SchemeFactory {
      public modificarVertice_resultTupleScheme getScheme() {
        return new modificarVertice_resultTupleScheme();
      }
    }

    private static class modificarVertice_resultTupleScheme extends TupleScheme<modificarVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modificarVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetVI()) {
          struct.VI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modificarVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.VI = new NaoExisteVertice();
          struct.VI.read(iprot);
          struct.setVIIsSet(true);
        }
      }
    }

  }

  public static class modificaAresta_args implements org.apache.thrift.TBase<modificaAresta_args, modificaAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<modificaAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modificaAresta_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField DIRECIONADO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcionado", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modificaAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modificaAresta_argsTupleSchemeFactory());
    }

    public long id; // required
    public double peso; // required
    public boolean direcionado; // required
    public String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PESO((short)2, "peso"),
      DIRECIONADO((short)3, "direcionado"),
      DESCRICAO((short)4, "descricao");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PESO
            return PESO;
          case 3: // DIRECIONADO
            return DIRECIONADO;
          case 4: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __PESO_ISSET_ID = 1;
    private static final int __DIRECIONADO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECIONADO, new org.apache.thrift.meta_data.FieldMetaData("direcionado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modificaAresta_args.class, metaDataMap);
    }

    public modificaAresta_args() {
    }

    public modificaAresta_args(
      long id,
      double peso,
      boolean direcionado,
      String descricao)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modificaAresta_args(modificaAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.peso = other.peso;
      this.direcionado = other.direcionado;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public modificaAresta_args deepCopy() {
      return new modificaAresta_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecionadoIsSet(false);
      this.direcionado = false;
      this.descricao = null;
    }

    public long getId() {
      return this.id;
    }

    public modificaAresta_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public modificaAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecionado() {
      return this.direcionado;
    }

    public modificaAresta_args setDirecionado(boolean direcionado) {
      this.direcionado = direcionado;
      setDirecionadoIsSet(true);
      return this;
    }

    public void unsetDirecionado() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    /** Returns true if field direcionado is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecionado() {
      return EncodingUtils.testBit(__isset_bitfield, __DIRECIONADO_ISSET_ID);
    }

    public void setDirecionadoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECIONADO_ISSET_ID, value);
    }

    public String getDescricao() {
      return this.descricao;
    }

    public modificaAresta_args setDescricao(String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      case DIRECIONADO:
        if (value == null) {
          unsetDirecionado();
        } else {
          setDirecionado((Boolean)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case PESO:
        return Double.valueOf(getPeso());

      case DIRECIONADO:
        return Boolean.valueOf(isDirecionado());

      case DESCRICAO:
        return getDescricao();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PESO:
        return isSetPeso();
      case DIRECIONADO:
        return isSetDirecionado();
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modificaAresta_args)
        return this.equals((modificaAresta_args)that);
      return false;
    }

    public boolean equals(modificaAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcionado = true;
      boolean that_present_direcionado = true;
      if (this_present_direcionado || that_present_direcionado) {
        if (!(this_present_direcionado && that_present_direcionado))
          return false;
        if (this.direcionado != that.direcionado)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modificaAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirecionado()).compareTo(other.isSetDirecionado());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecionado()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcionado, other.direcionado);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modificaAresta_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcionado:");
      sb.append(this.direcionado);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modificaAresta_argsStandardSchemeFactory implements SchemeFactory {
      public modificaAresta_argsStandardScheme getScheme() {
        return new modificaAresta_argsStandardScheme();
      }
    }

    private static class modificaAresta_argsStandardScheme extends StandardScheme<modificaAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modificaAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIRECIONADO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcionado = iprot.readBool();
                struct.setDirecionadoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modificaAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECIONADO_FIELD_DESC);
        oprot.writeBool(struct.direcionado);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modificaAresta_argsTupleSchemeFactory implements SchemeFactory {
      public modificaAresta_argsTupleScheme getScheme() {
        return new modificaAresta_argsTupleScheme();
      }
    }

    private static class modificaAresta_argsTupleScheme extends TupleScheme<modificaAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modificaAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetPeso()) {
          optionals.set(1);
        }
        if (struct.isSetDirecionado()) {
          optionals.set(2);
        }
        if (struct.isSetDescricao()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecionado()) {
          oprot.writeBool(struct.direcionado);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modificaAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.direcionado = iprot.readBool();
          struct.setDirecionadoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

  }

  public static class modificaAresta_result implements org.apache.thrift.TBase<modificaAresta_result, modificaAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<modificaAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modificaAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AI_FIELD_DESC = new org.apache.thrift.protocol.TField("AI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modificaAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modificaAresta_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteAresta AI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AI((short)1, "AI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AI
            return AI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AI, new org.apache.thrift.meta_data.FieldMetaData("AI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modificaAresta_result.class, metaDataMap);
    }

    public modificaAresta_result() {
    }

    public modificaAresta_result(
      String success,
      NaoExisteAresta AI)
    {
      this();
      this.success = success;
      this.AI = AI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modificaAresta_result(modificaAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAI()) {
        this.AI = new NaoExisteAresta(other.AI);
      }
    }

    public modificaAresta_result deepCopy() {
      return new modificaAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.AI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public modificaAresta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteAresta getAI() {
      return this.AI;
    }

    public modificaAresta_result setAI(NaoExisteAresta AI) {
      this.AI = AI;
      return this;
    }

    public void unsetAI() {
      this.AI = null;
    }

    /** Returns true if field AI is set (has been assigned a value) and false otherwise */
    public boolean isSetAI() {
      return this.AI != null;
    }

    public void setAIIsSet(boolean value) {
      if (!value) {
        this.AI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AI:
        if (value == null) {
          unsetAI();
        } else {
          setAI((NaoExisteAresta)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AI:
        return getAI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AI:
        return isSetAI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modificaAresta_result)
        return this.equals((modificaAresta_result)that);
      return false;
    }

    public boolean equals(modificaAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_AI = true && this.isSetAI();
      boolean that_present_AI = true && that.isSetAI();
      if (this_present_AI || that_present_AI) {
        if (!(this_present_AI && that_present_AI))
          return false;
        if (!this.AI.equals(that.AI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modificaAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAI()).compareTo(other.isSetAI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AI, other.AI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modificaAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("AI:");
      if (this.AI == null) {
        sb.append("null");
      } else {
        sb.append(this.AI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modificaAresta_resultStandardSchemeFactory implements SchemeFactory {
      public modificaAresta_resultStandardScheme getScheme() {
        return new modificaAresta_resultStandardScheme();
      }
    }

    private static class modificaAresta_resultStandardScheme extends StandardScheme<modificaAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modificaAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.AI = new NaoExisteAresta();
                struct.AI.read(iprot);
                struct.setAIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modificaAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.AI != null) {
          oprot.writeFieldBegin(AI_FIELD_DESC);
          struct.AI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modificaAresta_resultTupleSchemeFactory implements SchemeFactory {
      public modificaAresta_resultTupleScheme getScheme() {
        return new modificaAresta_resultTupleScheme();
      }
    }

    private static class modificaAresta_resultTupleScheme extends TupleScheme<modificaAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modificaAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAI()) {
          struct.AI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modificaAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.AI = new NaoExisteAresta();
          struct.AI.read(iprot);
          struct.setAIIsSet(true);
        }
      }
    }

  }

  public static class lerGrafo_args implements org.apache.thrift.TBase<lerGrafo_args, lerGrafo_args._Fields>, java.io.Serializable, Cloneable, Comparable<lerGrafo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerGrafo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lerGrafo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lerGrafo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerGrafo_args.class, metaDataMap);
    }

    public lerGrafo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerGrafo_args(lerGrafo_args other) {
    }

    public lerGrafo_args deepCopy() {
      return new lerGrafo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lerGrafo_args)
        return this.equals((lerGrafo_args)that);
      return false;
    }

    public boolean equals(lerGrafo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lerGrafo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lerGrafo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerGrafo_argsStandardSchemeFactory implements SchemeFactory {
      public lerGrafo_argsStandardScheme getScheme() {
        return new lerGrafo_argsStandardScheme();
      }
    }

    private static class lerGrafo_argsStandardScheme extends StandardScheme<lerGrafo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerGrafo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerGrafo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerGrafo_argsTupleSchemeFactory implements SchemeFactory {
      public lerGrafo_argsTupleScheme getScheme() {
        return new lerGrafo_argsTupleScheme();
      }
    }

    private static class lerGrafo_argsTupleScheme extends TupleScheme<lerGrafo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerGrafo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class lerGrafo_result implements org.apache.thrift.TBase<lerGrafo_result, lerGrafo_result._Fields>, java.io.Serializable, Cloneable, Comparable<lerGrafo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerGrafo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lerGrafo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lerGrafo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerGrafo_result.class, metaDataMap);
    }

    public lerGrafo_result() {
    }

    public lerGrafo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerGrafo_result(lerGrafo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lerGrafo_result deepCopy() {
      return new lerGrafo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lerGrafo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lerGrafo_result)
        return this.equals((lerGrafo_result)that);
      return false;
    }

    public boolean equals(lerGrafo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lerGrafo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lerGrafo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerGrafo_resultStandardSchemeFactory implements SchemeFactory {
      public lerGrafo_resultStandardScheme getScheme() {
        return new lerGrafo_resultStandardScheme();
      }
    }

    private static class lerGrafo_resultStandardScheme extends StandardScheme<lerGrafo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerGrafo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerGrafo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerGrafo_resultTupleSchemeFactory implements SchemeFactory {
      public lerGrafo_resultTupleScheme getScheme() {
        return new lerGrafo_resultTupleScheme();
      }
    }

    private static class lerGrafo_resultTupleScheme extends TupleScheme<lerGrafo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerGrafo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lerVertice_args implements org.apache.thrift.TBase<lerVertice_args, lerVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<lerVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lerVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lerVertice_argsTupleSchemeFactory());
    }

    public long nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerVertice_args.class, metaDataMap);
    }

    public lerVertice_args() {
    }

    public lerVertice_args(
      long nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerVertice_args(lerVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public lerVertice_args deepCopy() {
      return new lerVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public long getNome() {
      return this.nome;
    }

    public lerVertice_args setNome(long nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Long.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lerVertice_args)
        return this.equals((lerVertice_args)that);
      return false;
    }

    public boolean equals(lerVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lerVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lerVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerVertice_argsStandardSchemeFactory implements SchemeFactory {
      public lerVertice_argsStandardScheme getScheme() {
        return new lerVertice_argsStandardScheme();
      }
    }

    private static class lerVertice_argsStandardScheme extends StandardScheme<lerVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nome = iprot.readI64();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI64(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerVertice_argsTupleSchemeFactory implements SchemeFactory {
      public lerVertice_argsTupleScheme getScheme() {
        return new lerVertice_argsTupleScheme();
      }
    }

    private static class lerVertice_argsTupleScheme extends TupleScheme<lerVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI64(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI64();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class lerVertice_result implements org.apache.thrift.TBase<lerVertice_result, lerVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<lerVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField VI_FIELD_DESC = new org.apache.thrift.protocol.TField("VI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lerVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lerVertice_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteVertice VI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VI((short)1, "VI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VI
            return VI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VI, new org.apache.thrift.meta_data.FieldMetaData("VI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerVertice_result.class, metaDataMap);
    }

    public lerVertice_result() {
    }

    public lerVertice_result(
      String success,
      NaoExisteVertice VI)
    {
      this();
      this.success = success;
      this.VI = VI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerVertice_result(lerVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetVI()) {
        this.VI = new NaoExisteVertice(other.VI);
      }
    }

    public lerVertice_result deepCopy() {
      return new lerVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.VI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lerVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteVertice getVI() {
      return this.VI;
    }

    public lerVertice_result setVI(NaoExisteVertice VI) {
      this.VI = VI;
      return this;
    }

    public void unsetVI() {
      this.VI = null;
    }

    /** Returns true if field VI is set (has been assigned a value) and false otherwise */
    public boolean isSetVI() {
      return this.VI != null;
    }

    public void setVIIsSet(boolean value) {
      if (!value) {
        this.VI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case VI:
        if (value == null) {
          unsetVI();
        } else {
          setVI((NaoExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VI:
        return getVI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VI:
        return isSetVI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lerVertice_result)
        return this.equals((lerVertice_result)that);
      return false;
    }

    public boolean equals(lerVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_VI = true && this.isSetVI();
      boolean that_present_VI = true && that.isSetVI();
      if (this_present_VI || that_present_VI) {
        if (!(this_present_VI && that_present_VI))
          return false;
        if (!this.VI.equals(that.VI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lerVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVI()).compareTo(other.isSetVI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VI, other.VI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lerVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VI:");
      if (this.VI == null) {
        sb.append("null");
      } else {
        sb.append(this.VI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerVertice_resultStandardSchemeFactory implements SchemeFactory {
      public lerVertice_resultStandardScheme getScheme() {
        return new lerVertice_resultStandardScheme();
      }
    }

    private static class lerVertice_resultStandardScheme extends StandardScheme<lerVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VI = new NaoExisteVertice();
                struct.VI.read(iprot);
                struct.setVIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.VI != null) {
          oprot.writeFieldBegin(VI_FIELD_DESC);
          struct.VI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerVertice_resultTupleSchemeFactory implements SchemeFactory {
      public lerVertice_resultTupleScheme getScheme() {
        return new lerVertice_resultTupleScheme();
      }
    }

    private static class lerVertice_resultTupleScheme extends TupleScheme<lerVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetVI()) {
          struct.VI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.VI = new NaoExisteVertice();
          struct.VI.read(iprot);
          struct.setVIIsSet(true);
        }
      }
    }

  }

  public static class lerAresta_args implements org.apache.thrift.TBase<lerAresta_args, lerAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<lerAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerAresta_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lerAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lerAresta_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerAresta_args.class, metaDataMap);
    }

    public lerAresta_args() {
    }

    public lerAresta_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerAresta_args(lerAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public lerAresta_args deepCopy() {
      return new lerAresta_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public lerAresta_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lerAresta_args)
        return this.equals((lerAresta_args)that);
      return false;
    }

    public boolean equals(lerAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lerAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lerAresta_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerAresta_argsStandardSchemeFactory implements SchemeFactory {
      public lerAresta_argsStandardScheme getScheme() {
        return new lerAresta_argsStandardScheme();
      }
    }

    private static class lerAresta_argsStandardScheme extends StandardScheme<lerAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerAresta_argsTupleSchemeFactory implements SchemeFactory {
      public lerAresta_argsTupleScheme getScheme() {
        return new lerAresta_argsTupleScheme();
      }
    }

    private static class lerAresta_argsTupleScheme extends TupleScheme<lerAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class lerAresta_result implements org.apache.thrift.TBase<lerAresta_result, lerAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<lerAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AI_FIELD_DESC = new org.apache.thrift.protocol.TField("AI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lerAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lerAresta_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteAresta AI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AI((short)1, "AI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AI
            return AI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AI, new org.apache.thrift.meta_data.FieldMetaData("AI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerAresta_result.class, metaDataMap);
    }

    public lerAresta_result() {
    }

    public lerAresta_result(
      String success,
      NaoExisteAresta AI)
    {
      this();
      this.success = success;
      this.AI = AI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerAresta_result(lerAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAI()) {
        this.AI = new NaoExisteAresta(other.AI);
      }
    }

    public lerAresta_result deepCopy() {
      return new lerAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.AI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lerAresta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteAresta getAI() {
      return this.AI;
    }

    public lerAresta_result setAI(NaoExisteAresta AI) {
      this.AI = AI;
      return this;
    }

    public void unsetAI() {
      this.AI = null;
    }

    /** Returns true if field AI is set (has been assigned a value) and false otherwise */
    public boolean isSetAI() {
      return this.AI != null;
    }

    public void setAIIsSet(boolean value) {
      if (!value) {
        this.AI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AI:
        if (value == null) {
          unsetAI();
        } else {
          setAI((NaoExisteAresta)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AI:
        return getAI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AI:
        return isSetAI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lerAresta_result)
        return this.equals((lerAresta_result)that);
      return false;
    }

    public boolean equals(lerAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_AI = true && this.isSetAI();
      boolean that_present_AI = true && that.isSetAI();
      if (this_present_AI || that_present_AI) {
        if (!(this_present_AI && that_present_AI))
          return false;
        if (!this.AI.equals(that.AI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lerAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAI()).compareTo(other.isSetAI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AI, other.AI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lerAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("AI:");
      if (this.AI == null) {
        sb.append("null");
      } else {
        sb.append(this.AI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerAresta_resultStandardSchemeFactory implements SchemeFactory {
      public lerAresta_resultStandardScheme getScheme() {
        return new lerAresta_resultStandardScheme();
      }
    }

    private static class lerAresta_resultStandardScheme extends StandardScheme<lerAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.AI = new NaoExisteAresta();
                struct.AI.read(iprot);
                struct.setAIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.AI != null) {
          oprot.writeFieldBegin(AI_FIELD_DESC);
          struct.AI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerAresta_resultTupleSchemeFactory implements SchemeFactory {
      public lerAresta_resultTupleScheme getScheme() {
        return new lerAresta_resultTupleScheme();
      }
    }

    private static class lerAresta_resultTupleScheme extends TupleScheme<lerAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAI()) {
          struct.AI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.AI = new NaoExisteAresta();
          struct.AI.read(iprot);
          struct.setAIIsSet(true);
        }
      }
    }

  }

  public static class listarVerticeDeAresta_args implements org.apache.thrift.TBase<listarVerticeDeAresta_args, listarVerticeDeAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticeDeAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticeDeAresta_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarVerticeDeAresta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarVerticeDeAresta_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticeDeAresta_args.class, metaDataMap);
    }

    public listarVerticeDeAresta_args() {
    }

    public listarVerticeDeAresta_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticeDeAresta_args(listarVerticeDeAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public listarVerticeDeAresta_args deepCopy() {
      return new listarVerticeDeAresta_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public listarVerticeDeAresta_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticeDeAresta_args)
        return this.equals((listarVerticeDeAresta_args)that);
      return false;
    }

    public boolean equals(listarVerticeDeAresta_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarVerticeDeAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarVerticeDeAresta_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticeDeAresta_argsStandardSchemeFactory implements SchemeFactory {
      public listarVerticeDeAresta_argsStandardScheme getScheme() {
        return new listarVerticeDeAresta_argsStandardScheme();
      }
    }

    private static class listarVerticeDeAresta_argsStandardScheme extends StandardScheme<listarVerticeDeAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticeDeAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticeDeAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticeDeAresta_argsTupleSchemeFactory implements SchemeFactory {
      public listarVerticeDeAresta_argsTupleScheme getScheme() {
        return new listarVerticeDeAresta_argsTupleScheme();
      }
    }

    private static class listarVerticeDeAresta_argsTupleScheme extends TupleScheme<listarVerticeDeAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticeDeAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticeDeAresta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class listarVerticeDeAresta_result implements org.apache.thrift.TBase<listarVerticeDeAresta_result, listarVerticeDeAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticeDeAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticeDeAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AI_FIELD_DESC = new org.apache.thrift.protocol.TField("AI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarVerticeDeAresta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarVerticeDeAresta_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteAresta AI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AI((short)1, "AI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AI
            return AI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AI, new org.apache.thrift.meta_data.FieldMetaData("AI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticeDeAresta_result.class, metaDataMap);
    }

    public listarVerticeDeAresta_result() {
    }

    public listarVerticeDeAresta_result(
      String success,
      NaoExisteAresta AI)
    {
      this();
      this.success = success;
      this.AI = AI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticeDeAresta_result(listarVerticeDeAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAI()) {
        this.AI = new NaoExisteAresta(other.AI);
      }
    }

    public listarVerticeDeAresta_result deepCopy() {
      return new listarVerticeDeAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.AI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listarVerticeDeAresta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteAresta getAI() {
      return this.AI;
    }

    public listarVerticeDeAresta_result setAI(NaoExisteAresta AI) {
      this.AI = AI;
      return this;
    }

    public void unsetAI() {
      this.AI = null;
    }

    /** Returns true if field AI is set (has been assigned a value) and false otherwise */
    public boolean isSetAI() {
      return this.AI != null;
    }

    public void setAIIsSet(boolean value) {
      if (!value) {
        this.AI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AI:
        if (value == null) {
          unsetAI();
        } else {
          setAI((NaoExisteAresta)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AI:
        return getAI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AI:
        return isSetAI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticeDeAresta_result)
        return this.equals((listarVerticeDeAresta_result)that);
      return false;
    }

    public boolean equals(listarVerticeDeAresta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_AI = true && this.isSetAI();
      boolean that_present_AI = true && that.isSetAI();
      if (this_present_AI || that_present_AI) {
        if (!(this_present_AI && that_present_AI))
          return false;
        if (!this.AI.equals(that.AI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarVerticeDeAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAI()).compareTo(other.isSetAI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AI, other.AI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarVerticeDeAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("AI:");
      if (this.AI == null) {
        sb.append("null");
      } else {
        sb.append(this.AI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticeDeAresta_resultStandardSchemeFactory implements SchemeFactory {
      public listarVerticeDeAresta_resultStandardScheme getScheme() {
        return new listarVerticeDeAresta_resultStandardScheme();
      }
    }

    private static class listarVerticeDeAresta_resultStandardScheme extends StandardScheme<listarVerticeDeAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticeDeAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.AI = new NaoExisteAresta();
                struct.AI.read(iprot);
                struct.setAIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticeDeAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.AI != null) {
          oprot.writeFieldBegin(AI_FIELD_DESC);
          struct.AI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticeDeAresta_resultTupleSchemeFactory implements SchemeFactory {
      public listarVerticeDeAresta_resultTupleScheme getScheme() {
        return new listarVerticeDeAresta_resultTupleScheme();
      }
    }

    private static class listarVerticeDeAresta_resultTupleScheme extends TupleScheme<listarVerticeDeAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticeDeAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAI()) {
          struct.AI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticeDeAresta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.AI = new NaoExisteAresta();
          struct.AI.read(iprot);
          struct.setAIIsSet(true);
        }
      }
    }

  }

  public static class listarArestaDeVertice_args implements org.apache.thrift.TBase<listarArestaDeVertice_args, listarArestaDeVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarArestaDeVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarArestaDeVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarArestaDeVertice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarArestaDeVertice_argsTupleSchemeFactory());
    }

    public long nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarArestaDeVertice_args.class, metaDataMap);
    }

    public listarArestaDeVertice_args() {
    }

    public listarArestaDeVertice_args(
      long nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarArestaDeVertice_args(listarArestaDeVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public listarArestaDeVertice_args deepCopy() {
      return new listarArestaDeVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public long getNome() {
      return this.nome;
    }

    public listarArestaDeVertice_args setNome(long nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Long.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarArestaDeVertice_args)
        return this.equals((listarArestaDeVertice_args)that);
      return false;
    }

    public boolean equals(listarArestaDeVertice_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarArestaDeVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarArestaDeVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarArestaDeVertice_argsStandardSchemeFactory implements SchemeFactory {
      public listarArestaDeVertice_argsStandardScheme getScheme() {
        return new listarArestaDeVertice_argsStandardScheme();
      }
    }

    private static class listarArestaDeVertice_argsStandardScheme extends StandardScheme<listarArestaDeVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarArestaDeVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nome = iprot.readI64();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarArestaDeVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI64(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarArestaDeVertice_argsTupleSchemeFactory implements SchemeFactory {
      public listarArestaDeVertice_argsTupleScheme getScheme() {
        return new listarArestaDeVertice_argsTupleScheme();
      }
    }

    private static class listarArestaDeVertice_argsTupleScheme extends TupleScheme<listarArestaDeVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarArestaDeVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI64(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarArestaDeVertice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI64();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class listarArestaDeVertice_result implements org.apache.thrift.TBase<listarArestaDeVertice_result, listarArestaDeVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarArestaDeVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarArestaDeVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField VI_FIELD_DESC = new org.apache.thrift.protocol.TField("VI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarArestaDeVertice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarArestaDeVertice_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteVertice VI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VI((short)1, "VI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VI
            return VI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VI, new org.apache.thrift.meta_data.FieldMetaData("VI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarArestaDeVertice_result.class, metaDataMap);
    }

    public listarArestaDeVertice_result() {
    }

    public listarArestaDeVertice_result(
      String success,
      NaoExisteVertice VI)
    {
      this();
      this.success = success;
      this.VI = VI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarArestaDeVertice_result(listarArestaDeVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetVI()) {
        this.VI = new NaoExisteVertice(other.VI);
      }
    }

    public listarArestaDeVertice_result deepCopy() {
      return new listarArestaDeVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.VI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listarArestaDeVertice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteVertice getVI() {
      return this.VI;
    }

    public listarArestaDeVertice_result setVI(NaoExisteVertice VI) {
      this.VI = VI;
      return this;
    }

    public void unsetVI() {
      this.VI = null;
    }

    /** Returns true if field VI is set (has been assigned a value) and false otherwise */
    public boolean isSetVI() {
      return this.VI != null;
    }

    public void setVIIsSet(boolean value) {
      if (!value) {
        this.VI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case VI:
        if (value == null) {
          unsetVI();
        } else {
          setVI((NaoExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VI:
        return getVI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VI:
        return isSetVI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarArestaDeVertice_result)
        return this.equals((listarArestaDeVertice_result)that);
      return false;
    }

    public boolean equals(listarArestaDeVertice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_VI = true && this.isSetVI();
      boolean that_present_VI = true && that.isSetVI();
      if (this_present_VI || that_present_VI) {
        if (!(this_present_VI && that_present_VI))
          return false;
        if (!this.VI.equals(that.VI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarArestaDeVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVI()).compareTo(other.isSetVI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VI, other.VI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarArestaDeVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VI:");
      if (this.VI == null) {
        sb.append("null");
      } else {
        sb.append(this.VI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarArestaDeVertice_resultStandardSchemeFactory implements SchemeFactory {
      public listarArestaDeVertice_resultStandardScheme getScheme() {
        return new listarArestaDeVertice_resultStandardScheme();
      }
    }

    private static class listarArestaDeVertice_resultStandardScheme extends StandardScheme<listarArestaDeVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarArestaDeVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VI = new NaoExisteVertice();
                struct.VI.read(iprot);
                struct.setVIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarArestaDeVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.VI != null) {
          oprot.writeFieldBegin(VI_FIELD_DESC);
          struct.VI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarArestaDeVertice_resultTupleSchemeFactory implements SchemeFactory {
      public listarArestaDeVertice_resultTupleScheme getScheme() {
        return new listarArestaDeVertice_resultTupleScheme();
      }
    }

    private static class listarArestaDeVertice_resultTupleScheme extends TupleScheme<listarArestaDeVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarArestaDeVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetVI()) {
          struct.VI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarArestaDeVertice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.VI = new NaoExisteVertice();
          struct.VI.read(iprot);
          struct.setVIIsSet(true);
        }
      }
    }

  }

  public static class listarVerticesVizinhos_args implements org.apache.thrift.TBase<listarVerticesVizinhos_args, listarVerticesVizinhos_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticesVizinhos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticesVizinhos_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarVerticesVizinhos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarVerticesVizinhos_argsTupleSchemeFactory());
    }

    public long nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticesVizinhos_args.class, metaDataMap);
    }

    public listarVerticesVizinhos_args() {
    }

    public listarVerticesVizinhos_args(
      long nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticesVizinhos_args(listarVerticesVizinhos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public listarVerticesVizinhos_args deepCopy() {
      return new listarVerticesVizinhos_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public long getNome() {
      return this.nome;
    }

    public listarVerticesVizinhos_args setNome(long nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return Long.valueOf(getNome());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticesVizinhos_args)
        return this.equals((listarVerticesVizinhos_args)that);
      return false;
    }

    public boolean equals(listarVerticesVizinhos_args that) {
      if (that == null)
        return false;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarVerticesVizinhos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarVerticesVizinhos_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticesVizinhos_argsStandardSchemeFactory implements SchemeFactory {
      public listarVerticesVizinhos_argsStandardScheme getScheme() {
        return new listarVerticesVizinhos_argsStandardScheme();
      }
    }

    private static class listarVerticesVizinhos_argsStandardScheme extends StandardScheme<listarVerticesVizinhos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.nome = iprot.readI64();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI64(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticesVizinhos_argsTupleSchemeFactory implements SchemeFactory {
      public listarVerticesVizinhos_argsTupleScheme getScheme() {
        return new listarVerticesVizinhos_argsTupleScheme();
      }
    }

    private static class listarVerticesVizinhos_argsTupleScheme extends TupleScheme<listarVerticesVizinhos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI64(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI64();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class listarVerticesVizinhos_result implements org.apache.thrift.TBase<listarVerticesVizinhos_result, listarVerticesVizinhos_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticesVizinhos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticesVizinhos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField VI_FIELD_DESC = new org.apache.thrift.protocol.TField("VI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listarVerticesVizinhos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listarVerticesVizinhos_resultTupleSchemeFactory());
    }

    public String success; // required
    public NaoExisteVertice VI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VI((short)1, "VI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VI
            return VI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VI, new org.apache.thrift.meta_data.FieldMetaData("VI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticesVizinhos_result.class, metaDataMap);
    }

    public listarVerticesVizinhos_result() {
    }

    public listarVerticesVizinhos_result(
      String success,
      NaoExisteVertice VI)
    {
      this();
      this.success = success;
      this.VI = VI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticesVizinhos_result(listarVerticesVizinhos_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetVI()) {
        this.VI = new NaoExisteVertice(other.VI);
      }
    }

    public listarVerticesVizinhos_result deepCopy() {
      return new listarVerticesVizinhos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.VI = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listarVerticesVizinhos_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NaoExisteVertice getVI() {
      return this.VI;
    }

    public listarVerticesVizinhos_result setVI(NaoExisteVertice VI) {
      this.VI = VI;
      return this;
    }

    public void unsetVI() {
      this.VI = null;
    }

    /** Returns true if field VI is set (has been assigned a value) and false otherwise */
    public boolean isSetVI() {
      return this.VI != null;
    }

    public void setVIIsSet(boolean value) {
      if (!value) {
        this.VI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case VI:
        if (value == null) {
          unsetVI();
        } else {
          setVI((NaoExisteVertice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VI:
        return getVI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VI:
        return isSetVI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticesVizinhos_result)
        return this.equals((listarVerticesVizinhos_result)that);
      return false;
    }

    public boolean equals(listarVerticesVizinhos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_VI = true && this.isSetVI();
      boolean that_present_VI = true && that.isSetVI();
      if (this_present_VI || that_present_VI) {
        if (!(this_present_VI && that_present_VI))
          return false;
        if (!this.VI.equals(that.VI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listarVerticesVizinhos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVI()).compareTo(other.isSetVI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VI, other.VI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listarVerticesVizinhos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("VI:");
      if (this.VI == null) {
        sb.append("null");
      } else {
        sb.append(this.VI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticesVizinhos_resultStandardSchemeFactory implements SchemeFactory {
      public listarVerticesVizinhos_resultStandardScheme getScheme() {
        return new listarVerticesVizinhos_resultStandardScheme();
      }
    }

    private static class listarVerticesVizinhos_resultStandardScheme extends StandardScheme<listarVerticesVizinhos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.VI = new NaoExisteVertice();
                struct.VI.read(iprot);
                struct.setVIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.VI != null) {
          oprot.writeFieldBegin(VI_FIELD_DESC);
          struct.VI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticesVizinhos_resultTupleSchemeFactory implements SchemeFactory {
      public listarVerticesVizinhos_resultTupleScheme getScheme() {
        return new listarVerticesVizinhos_resultTupleScheme();
      }
    }

    private static class listarVerticesVizinhos_resultTupleScheme extends TupleScheme<listarVerticesVizinhos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetVI()) {
          struct.VI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.VI = new NaoExisteVertice();
          struct.VI.read(iprot);
          struct.setVIIsSet(true);
        }
      }
    }

  }

}
